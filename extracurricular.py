"""
Arquivo: extracurricular.py
Descri√ß√£o: Aulas complementares de Python (29/09 a 08/10/2025)
Autor: Jo√£o Victor Canavez
Objetivo: Consolidar fundamentos de l√≥gica e programa√ß√£o em Python.
"""


# =====================================================
# DIA 1 (29/09/2025) ‚Äî Revis√£o inicial
# =====================================================

# 1. Frase com tr√™s formas
# Mostrar a frase:
# "Meu nome √© Jo√£o e tenho 20 anos."
# Usando: concatena√ß√£o (+), v√≠rgulas, f-string

nome = "Jo√£o"
idade = 20

print("Meu nome √© " + nome + " e tenho " + str(idade) + " anos.")  # concatena√ß√£o
print("Meu nome √©", nome, "e tenho", idade, "anos.")               # v√≠rgulas
print(f"Meu nome √© {nome} e tenho {idade} anos.")                  # f-string

# -----------------------------------------------------

# 2. Nome e cidade
# Pe√ßa ao usu√°rio o nome e a cidade e mostre:
# "Ol√°, Maria! Vejo que voc√™ mora em S√£o Paulo."

nome = input("Ol√°, bem-vindo. Me diga seu nome: ")
casa = input("Onde voc√™ mora? ")

print(f"Ol√°, {nome}! Vejo que voc√™ mora em {casa}.")

# -----------------------------------------------------

# 3. Calculando idade no futuro
# Pe√ßa a idade do usu√°rio e mostre quantos anos ter√° em 2050.

from datetime import date

idade = int(input("Qual a sua idade? "))
ano_atual = date.today().year
ano_futuro = 2050

print(f"Vejo que em 2050 voc√™ ter√° {idade + (ano_futuro - ano_atual)} anos, correto?")

# =====================================================
# DIA 2 (30/09/2025) ‚Äî N√∫meros e Opera√ß√µes
# =====================================================

# 1. Tipos num√©ricos
# int  -> n√∫meros inteiros (10, -5, 2025)
# float -> n√∫meros decimais (3.14, -0.5, 2.0)

# 2. Convers√µes de tipos
# int("25")   -> 25
# float("3.14") -> 3.14
# str(25)     -> "25"

# 3. Operadores matem√°ticos
# +  soma           5 + 2  -> 7
# -  subtra√ß√£o      5 - 2  -> 3
# *  multiplica√ß√£o  5 * 2  -> 10
# /  divis√£o        5 / 2  -> 2.5
# // divis√£o inteira 5 // 2 -> 2
# %  resto          5 % 2  -> 1
# ** pot√™ncia       5 ** 2 -> 25

# 4. Exemplos pr√°ticos
a = 10
b = 3

print(a + b)   # 13
print(a - b)   # 7
print(a * b)   # 30
print(a / b)   # 3.333...
print(a // b)  # 3
print(a % b)   # 1
print(a ** b)  # 1000

# -----------------------------------------------------

# Exerc√≠cio 1 ‚Äî Opera√ß√µes b√°sicas
n1 = int(input("Ol√°, me diga um n√∫mero: "))
n2 = int(input("Show! Agora me diga outro: "))

print("A soma √©:", n1 + n2)
print("A subtra√ß√£o √©:", n1 - n2)
print("A multiplica√ß√£o √©:", n1 * n2)
print("A divis√£o normal √©:", n1 / n2)
print("A divis√£o inteira √©:", n1 // n2)
print("O resto da divis√£o √©:", n1 % n2)
print("A pot√™ncia do primeiro elevado ao segundo √©:", n1 ** n2)

# -----------------------------------------------------

# Exerc√≠cio 2 ‚Äî Trabalhando com idade
idade = int(input("Bom dia, me diga a sua idade: "))

print("O dobro da sua idade √©", idade * 2)
print("A metade da sua idade √©", idade / 2)     # divis√£o float
print("A sua idade ao quadrado √©", idade ** 2)

# -----------------------------------------------------

# Exerc√≠cio 3 ‚Äî C√°lculo de m√©dia
nota1 = float(input("Primeira nota do aluno: "))
nota2 = float(input("Segunda nota do aluno: "))
nota3 = float(input("Terceira nota do aluno: "))

media = (nota1 + nota2 + nota3) / 3

print(f"A m√©dia do aluno √©: {media:.2f}")

if media < 6:
    print("REPROVADO!")
else:
    print("APROVADO")

# =====================================================
# DIA 3 (01/10/2025) ‚Äî Strings e manipula√ß√£o
# =====================================================

# 1. Strings s√£o textos, definidos entre aspas simples, duplas ou triplas.
nome = "Maria"
frase = 'Python √© divertido'
texto_longo = """Este √© um texto
com v√°rias linhas."""

# -----------------------------------------------------

# 2. Opera√ß√µes b√°sicas com strings
print("Ol√° " + nome)     # concatena√ß√£o
print("Oi! " * 3)        # repeti√ß√£o
print("Linha 1\nLinha 2\nLinha 3")  # nova linha
print("Nome:\tMaria")    # tabula√ß√£o
print("Idade:\t20")

# -----------------------------------------------------

# 3. Diferen√ßa entre v√≠rgula e +
nome = "Jo√£o"
idade = 20
print("Meu nome √©", nome, "e tenho", idade, "anos.")               # v√≠rgulas
print("Meu nome √© " + nome + " e tenho " + str(idade) + " anos.")  # concatena√ß√£o

# -----------------------------------------------------

# 4. M√©todos √∫teis de strings
texto = "  Python √© Incr√≠vel!  "

print(texto.lower())    # tudo min√∫sculo
print(texto.upper())    # tudo mai√∫sculo
print(texto.strip())    # remove espa√ßos extras
print(texto.replace("Incr√≠vel", "muito legal"))  # troca palavras
print(len(texto))       # tamanho da string

# =====================================================
# üìù Exerc√≠cios do Dia 3
# =====================================================

# Exerc√≠cio 1 ‚Äî Repeti√ß√£o
# Pe√ßa ao usu√°rio um nome e mostre ele repetido 5 vezes em linhas diferentes.
# (Dica: pode usar \n ou um loop for)

# üîπ Solu√ß√£o com FOR:
# - O comando "for" repete automaticamente um bloco de c√≥digo v√°rias vezes.
# - range(5) -> gera os n√∫meros 0, 1, 2, 3, 4 (total de 5 repeti√ß√µes).
# - A cada repeti√ß√£o, o valor de "i" muda, mas nesse exerc√≠cio n√£o precisamos usar "i".
# - Dentro do la√ßo, usamos apenas print(nome).

nome = input("Ol√°, qual seu nome? ")

for i in range(5):      # repete o bloco 5 vezes
    print(nome)         # mostra o nome em cada repeti√ß√£o


# Exerc√≠cio 2 ‚Äî Tabelinha
# Pe√ßa nome, idade e email e mostre como se fosse uma tabelinha usando \t:
# Exemplo:
# Nome:   Maria
# Idade:  20
# Email:  maria@email.com

# üîπ \t representa uma TABULA√á√ÉO (como se fosse a tecla TAB do teclado).
# Isso ajuda a alinhar o texto em colunas.

# Entrada de dados (input do usu√°rio)
nome = input("Ol√°, qual seu nome? ")
idade = int(input("Agora me diga sua idade: "))
email = input("Qual seu e-mail? ")

# Sa√≠da formatada (com tabula√ß√£o)
print("Nome:\t", nome)
print("Idade:\t", idade)
print("E-mail:\t", email)

# Exerc√≠cio 3 ‚Äî Ficha formatada
# Pe√ßa os mesmos dados (nome, idade e email), mas mostre como um formul√°rio:
# _________________________
# Nome: Maria
# Idade: 20
# Email: maria@email.com
# _________________________
# (Dica: pode usar "_" * 25 para a linha)

# Entrada de dados
nome = input("Ol√°, qual seu nome? ")
idade = int(input("Agora me diga sua idade: "))
email = input("Qual seu e-mail? ")

# Sa√≠da formatada
print("_" * 25)            # linha superior
print("Nome:", nome)       # mostra nome
print("Idade:", idade)     # mostra idade
print("E-mail:", email)    # mostra e-mail
print("_" * 25)            # linha inferior

# Desafio Extra üòé
# Pe√ßa ao usu√°rio para digitar uma frase.
# Depois mostre:
# - A frase toda em mai√∫sculas
# - A frase toda em min√∫sculas
# - Quantos caracteres a frase tem (sem espa√ßos nas pontas)

# Entrada de dados
texto = input("Coloque sua frase aqui: ")

# Sa√≠da formatada
print(texto.lower())          # tudo min√∫sculo
print(texto.upper())          # tudo mai√∫sculo
print(len(texto.strip()))     # conta caracteres sem espa√ßos nas pontas

# =====================================================
# DIA 4 (02/10/2025) ‚Äî Misturando tudo
# (print, vari√°veis, input, n√∫meros, strings, formata√ß√£o)
# =====================================================

# 1) Relembrando: tr√™s jeitos de imprimir valores
nome = "Ana"
idade = 22

print("Meu nome √© " + nome + " e tenho " + str(idade) + " anos.")  # concatena√ß√£o (+)
print("Meu nome √©", nome, "e tenho", idade, "anos.")               # v√≠rgulas no print
print(f"Meu nome √© {nome} e tenho {idade} anos.")                  # f-string (recomendado)

# -----------------------------------------------------

# 2) Convertendo tipos ao ler com input()
# input() sempre retorna str -> converta quando precisar de n√∫mero
altura = float(input("Sua altura (em metros): "))
ano_atual = 2025  # vamos manter expl√≠cito aqui
nascimento = int(input("Ano de nascimento: "))

print(f"Voc√™ tem aproximadamente {ano_atual - nascimento} anos e mede {altura} m.")

# -----------------------------------------------------

# 3) Formata√ß√£o de n√∫meros (duas casas decimais)
preco = 19.9
quant = 3
total = preco * quant

print("Total sem formata√ß√£o:", total)
print(f"Total com 2 casas: R$ {total:.2f}")  # :.2f -> duas casas decimais

# -----------------------------------------------------

# 4) Montando ‚Äúlayouts‚Äù com caracteres repetidos, \n e \t
print("_" * 30)
print("Produto:\tCaderno")
print("Pre√ßo:\t\tR$ 12.50")
print("Qtd:\t\t2")
print("_" * 30)

# \n quebra linha; \t √© tabula√ß√£o (como a tecla TAB)

# -----------------------------------------------------

# 5) Strings √∫teis no dia a dia
frase = "   python √© demais!   "
print(frase.strip())                 # remove espa√ßos extras nas pontas
print(frase.strip().title())         # T√≠tulo: 'Python √â Demais!'
print(frase.upper())                 # MAI√öSCULAS
print(len(frase.strip()))            # tamanho sem espa√ßos das pontas

# -----------------------------------------------------

# 6) Observa√ß√µes importantes
# - Divis√£o por zero causa erro: 10 / 0 (cuidado quando pedir n√∫meros ao usu√°rio)
# - Use f-strings para misturar texto + vari√°veis de forma clara
# - Quando quiser alinhar ‚Äútabelinhas‚Äù, \t ajuda bastante

# =====================================================
# üìù Exerc√≠cios do Dia 4 (n√£o resolver aqui)
# =====================================================

# Exerc√≠cio 1 ‚Äî Cart√£o de visita
# Pe√ßa nome, profiss√£o e cidade. Mostre um ‚Äúcart√£o‚Äù com moldura e \t para alinhar:
# ______________________________
# Nome:       ...
# Profiss√£o:  ...
# Cidade:     ...
# ______________________________

# Entrada de dados (input do usu√°rio)
nome = input("Ol√°, me diga seu nome: ")
profi = input(f"Ol√° {nome}, qual sua profiss√£o? ")
cidade = input(f"Perfeito {nome}, agora me fala em qual cidade voc√™ vive: ")

# Sa√≠da formatada (cart√£o de visita)
print("_" * 25)
print("Nome:\t", nome)
print("Profiss√£o:\t", profi)
print("Cidade:\t", cidade)
print("_" * 25)

# Exerc√≠cio 2 ‚Äî Mini ‚Äúcupom‚Äù de compra
# Pe√ßa 3 itens (nome do item, pre√ßo unit√°rio, quantidade).
# Calcule o total de cada item (pre√ßo * quantidade) e o total geral.
# Mostre tudo formatado com duas casas decimais e uma moldura.

# -----------------------------------------------------
# üîπ Estrutura escolhida: DICION√ÅRIOS
# - Cada item √© um dicion√°rio com 3 campos:
#   "Nome", "Pre√ßo", "Quantidade"
# - Isso torna o c√≥digo mais organizado e leg√≠vel.

# Entrada de dados (input do usu√°rio)
print("Verifique aqui seu item:")
item1 = {
    "Nome": input("Nome: "),
    "Pre√ßo": float(input("Pre√ßo: ")),
    "Quantidade": int(input("Quantidade: "))
}

print("Agora me diga outro item:")
item2 = {
    "Nome": input("Nome: "),
    "Pre√ßo": float(input("Pre√ßo: ")),
    "Quantidade": int(input("Quantidade: "))
}

print("Agora outro:")
item3 = {
    "Nome": input("Nome: "),
    "Pre√ßo": float(input("Pre√ßo: ")),
    "Quantidade": int(input("Quantidade: "))
}

# -----------------------------------------------------
# C√°lculo dos totais
total1 = item1["Pre√ßo"] * item1["Quantidade"]
total2 = item2["Pre√ßo"] * item2["Quantidade"]
total3 = item3["Pre√ßo"] * item3["Quantidade"]

# Total geral da compra
total_geral = total1 + total2 + total3

# -----------------------------------------------------
# Sa√≠da formatada (resumo da compra)
print("\nResumo da compra:")
print(item1["Nome"], "-", item1["Quantidade"], "x R$", item1["Pre√ßo"], "=", total1)
print(item2["Nome"], "-", item2["Quantidade"], "x R$", item2["Pre√ßo"], "=", total2)
print(item3["Nome"], "-", item3["Quantidade"], "x R$", item3["Pre√ßo"], "=", total3)
print("Total da compra = R$", total_geral)

# -----------------------------------------------------
# üìå Melhorias poss√≠veis (n√£o obrigat√≥rias agora):
# - Usar f-strings para formatar valores monet√°rios com 2 casas decimais:
#   f"R$ {total1:.2f}"
# - Guardar os 3 dicion√°rios dentro de uma lista e percorrer com for,
#   evitando repetir tanto c√≥digo (veremos isso nas pr√≥ximas aulas).


# Exerc√≠cio 3 ‚Äî Resumo pessoal
# Pe√ßa nome, idade e ano atual (como n√∫mero).
# Mostre: ‚ÄúOl√°, <nome>! Em <ano_atual + 1> voc√™ ter√° <idade + 1> anos.‚Äù
# (Use f-strings.)

# üîπ Esse exerc√≠cio serve para treinar:
#   - Leitura de dados com input()
#   - Convers√£o para int (idade e ano)
#   - Uso de f-strings para misturar texto e vari√°veis
#   - Opera√ß√µes matem√°ticas simples (+1)

# Entrada de dados
nome = input("Me diga seu nome: ")  # string
idade = int(input(f"Ol√° {nome}, quantos anos voc√™ tem? "))  # int
ano_atual = int(input("Agora me fala, qual o ano atual? "))  # int

# Sa√≠da formatada
print(f"Ol√°, {nome}! Em {ano_atual + 1} voc√™ ter√° {idade + 1} anos.")


# Exerc√≠cio 4 ‚Äî M√©dia de 4 notas
# Pe√ßa 4 notas (float), calcule a m√©dia e mostre com 2 casas.
# N√£o usar if aqui; foco √© pr√°tica de leitura, soma e formata√ß√£o.

# üîπ Neste exerc√≠cio usamos um DICION√ÅRIO para organizar as notas.
# üîπ Para acessar os valores, usamos colchetes: notas["nota1"].

# Entrada de dados (input do usu√°rio)
notas = {
    "nota1": float(input("Coloque a primeira nota: ")),
    "nota2": float(input("Coloque a segunda nota: ")),
    "nota3": float(input("Coloque a terceira nota: ")),
    "nota4": float(input("Coloque a quarta nota: "))
}

# C√°lculo da m√©dia
# Somamos as 4 notas e dividimos por 4
media = (notas["nota1"] + notas["nota2"] + notas["nota3"] + notas["nota4"]) / 4

# Sa√≠da formatada
print(f"A sua m√©dia √©: {media:.2f}")


# Exerc√≠cio 5 ‚Äî Texto normalizado
# Pe√ßa uma frase qualquer.
# Mostre:
# - A frase sem espa√ßos nas pontas
# - A frase em T√≠tulo (title)
# - Quantos caracteres a frase tem (sem espa√ßos das pontas)
# - A mesma frase entre molduras (linhas acima e abaixo)

# üîπ Esse exerc√≠cio serve para treinar:
#   - M√©todos de string: .strip(), .title(), len()
#   - Impress√£o formatada com caracteres repetidos ("_" * 25)

# Entrada de dados
frase = input("Me diga uma frase engra√ßada: ")

# Sa√≠das
print(frase.strip())            # 1) Frase sem espa√ßos extras
print(frase.strip().title())    # 2) Frase em formato de T√≠tulo
print(len(frase.strip()))       # 3) Quantidade de caracteres (sem espa√ßos)
print("_" * 25)                 # 4) Moldura superior
print(frase.strip())            #    Frase limpa dentro da moldura
print("_" * 25)                 #    Moldura inferior


# Desafio Extra üòé ‚Äî ‚ÄúPainel informativo‚Äù
# Monte um pequeno painel combinando tudo:
# - Uma linha de t√≠tulo com moldura
# - 2 ou 3 linhas de ‚Äúcampo: valor‚Äù usando \t para alinhar
# - Um rodap√© com o total (se aplicar), formatado com 2 casas
# Dica: escolha um tema (ex.: pedido, perfil, evento) e capriche no layout.

# ---------------------------
# Seu rascunho com observa√ß√µes
# ---------------------------

evento = "One Night Ink"
dados = {
    "nome": input("Nome do cliente: "),
    "tattoo": input("Arte selecionada: "),
    "senha": int(input("Senha de n√∫mero: "))
}
pre√ßo = {
    "tempo": input("Dura√ß√£o do trabalho: "),
    "valor": float(input("Quanto foi a arte: "))
}

print("=" * 25)
print(evento.strip().title())
print("=" * 25)

print(dados)                 # ‚ùå Isso imprime o dicion√°rio "cru" (ex.: {'nome': '‚Ä¶', ...})
                             #    Correto: mostrar cada campo separadamente (dados["nome"], etc.).

print("_" * 25)

print(pre√ßo["tempo"])        # ‚úÖ Ok (acessa a chave "tempo")
print(pre√ßo["valor" - "valor"])  # ‚ùå N√£o existe subtra√ß√£o de strings.
                                 #    Correto: acessar direto a chave "valor" -> pre√ßo["valor"]
print("Total: 0800 PAPAI!")

# ---------------------------
# Vers√£o corrigida e comentada
# ---------------------------

# Dica: √© comum evitar acentos em nomes de vari√°veis (ex.: usar 'preco' em vez de 'pre√ßo').
# Aqui manteremos 'pre√ßo' porque voc√™ j√° usou assim e funciona no Python 3.

evento = "One Night Ink"
dados = {
    "nome": input("Nome do cliente: "),
    "tattoo": input("Arte selecionada: "),
    "senha": int(input("Senha de n√∫mero: "))
}
pre√ßo = {
    "tempo": input("Dura√ß√£o do trabalho: "),
    "valor": float(input("Quanto foi a arte: "))
}

# Cabe√ßalho
print("\n" + "=" * 30)
print(evento.strip().upper())       # Deixa o t√≠tulo em CAIXA ALTA para destacar
print("=" * 30)

# Bloco: Dados do cliente (mostrando campos individualmente)
print("Cliente:\t", dados["nome"])
print("Arte:\t\t", dados["tattoo"])
print("Senha:\t\t", dados["senha"])

print("-" * 30)

# Bloco: Dados do servi√ßo
print("Dura√ß√£o:\t", pre√ßo["tempo"])
print(f"Valor:\t\t R$ {pre√ßo['valor']:.2f}")   # formata com 2 casas decimais

print("=" * 30)
print("TOTAL:\t\t 0800 PAPAI!")               # Mensagem final divertida :)
print("=" * 30)


# =====================================================
# DIA 5 (03/10/2025) ‚Äî Condi√ß√µes e Mini-Desafios
# =====================================================

# -----------------------------------------------------
# 1. Estruturas condicionais
# -----------------------------------------------------
# O "if" serve para tomar decis√µes no programa.
# Exemplo simples:
#
# nota = 7
# if nota >= 6:
#     print("Aprovado")
# else:
#     print("Reprovado")
#
# O "elif" permite verificar v√°rias condi√ß√µes:
#
# nota = 8
# if nota < 6:
#     print("Reprovado")
# elif nota < 8:
#     print("Recupera√ß√£o")
# else:
#     print("Aprovado com sucesso")

# -----------------------------------------------------
# 2. Operadores relacionais
# -----------------------------------------------------
# ==  igual
# !=  diferente
# <   menor
# >   maior
# <=  menor ou igual
# >=  maior ou igual

# -----------------------------------------------------
# 3. Operadores l√≥gicos
# -----------------------------------------------------
# and ‚Üí todas as condi√ß√µes precisam ser verdadeiras
# or  ‚Üí pelo menos uma condi√ß√£o precisa ser verdadeira
# not ‚Üí inverte o valor l√≥gico (True ‚Üí False, False ‚Üí True)
#
# Exemplo:
# idade = 20
# tem_carteira = True
#
# if idade >= 18 and tem_carteira:
#     print("Pode dirigir")

# =====================================================
# Exerc√≠cios do Dia 5
# =====================================================

# -----------------------------------------------------
# Exerc√≠cio 1 ‚Äî Cadastro simples
# -----------------------------------------------------
# Aqui usamos um IF/ELSE b√°sico:
# - Se a idade for >= 18 ‚Üí maior de idade
# - Caso contr√°rio ‚Üí menor de idade

nome = input("Me diga seu nome: ")         # pede o nome do usu√°rio
idade = int(input("Qual a sua idade? "))   # pede a idade (convertida em n√∫mero inteiro)

if idade >= 18:                            # condi√ß√£o: idade maior ou igual a 18
    print(f"{nome}, voc√™ √© maior de idade!")  # se for verdadeiro
else:                                      # caso contr√°rio
    print(f"{nome}, voc√™ ainda √© menor de idade.")


# -----------------------------------------------------
# Exerc√≠cio 2 ‚Äî Calculadora com escolha
# -----------------------------------------------------
# Passos:
# 1. Ler dois n√∫meros (float para aceitar decimais)
# 2. Perguntar a opera√ß√£o desejada
# 3. Usar IF/ELIF para decidir qual c√°lculo fazer
# 4. ELSE para tratar opera√ß√£o inv√°lida

n1 = float(input("Diga um n√∫mero: "))
n2 = float(input("Agora diga outro n√∫mero: "))

op = input("Agora me diga que opera√ß√£o voc√™ quer executar: ").lower()  # .lower() deixa tudo min√∫sculo

if op == "soma":
    print(f"A soma √© igual a: {n1 + n2}")
elif op == "subtra√ß√£o":
    print(f"A subtra√ß√£o √© igual a: {n1 - n2}")
elif op == "multiplica√ß√£o":
    print(f"A multiplica√ß√£o √© igual a: {n1 * n2}")
elif op == "divis√£o":
    if n2 != 0:                                     # prote√ß√£o contra divis√£o por zero
        print(f"A divis√£o √© igual a: {n1 / n2}")
    else:
        print("N√£o √© poss√≠vel dividir por zero!")
else:
    print("Opera√ß√£o inv√°lida!")                     # caso o usu√°rio digite algo diferente


# -----------------------------------------------------
# Exerc√≠cio 3 ‚Äî Sistema de notas
# -----------------------------------------------------
# Aqui temos 3 situa√ß√µes:
# - m√©dia < 6  ‚Üí Reprovado
# - m√©dia entre 6 e 7.9 ‚Üí Recupera√ß√£o
# - m√©dia >= 8 ‚Üí Aprovado com sucesso

media = float(input("Qual a m√©dia do aluno: "))

if media < 6:
    print("Reprovado!")
elif media < 8:                     # at√© 7.9
    print("Recupera√ß√£o!")
else: 
    print("Aprovado com sucesso!")


# -----------------------------------------------------
# Exerc√≠cio 4 ‚Äî Login simples
# -----------------------------------------------------
# Objetivo: verificar usu√°rio e senha
# - Usu√°rio deve ser "admin"
# - Senha deve ser "1234"
# OBS: .lower() no usu√°rio permite digitar "ADMIN", "Admin", etc.
#      J√° a senha deve ser exatamente igual (sem .lower())

user = input("Digite o nome de usu√°rio: ").lower()
senha = input("Agora digite a senha: ")

if user == "admin" and senha == "1234":   # duas condi√ß√µes ao mesmo tempo (and)
    print("Acesso Permitido!")
else:
    print("Usu√°rio ou senha inv√°lidos!")  # caso qualquer uma esteja errada


# -----------------------------------------------------
# Exerc√≠cio 5 ‚Äî Menu interativo
# -----------------------------------------------------
# Aqui usamos um LOOP (while True) para repetir at√© a op√ß√£o 3 (sair).
# Estrutura do menu:
# [1] Ver cart√£o de visita ‚Üí l√™ nome, profiss√£o, cidade
# [2] Calcular m√©dia ‚Üí l√™ 3 notas e mostra a m√©dia
# [3] Sair ‚Üí encerra o programa com "break"

while True:
    print("========== MENU ==========")
    print("[1] Ver cart√£o de visita")
    print("[2] Calcular m√©dia")
    print("[3] Sair")
    print("==========================")

    opcao = int(input("Escolha uma op√ß√£o: "))

    if opcao == 1:
        # cart√£o de visita
        nome = input("Nome: ")
        profi = input("Profiss√£o: ")
        cidade = input("Cidade: ")

        print("_" * 25)
        print(f"Nome: {nome}")
        print(f"Profiss√£o: {profi}")
        print(f"Cidade: {cidade}")
        print("_" * 25)
        print()  # apenas para dar espa√ßo visual

    elif opcao == 2:
        # c√°lculo da m√©dia
        n1 = float(input("Nota 1: "))
        n2 = float(input("Nota 2: "))
        n3 = float(input("Nota 3: "))

        media = (n1 + n2 + n3) / 3
        print(f"\nSua m√©dia √©: {media:.2f}\n")

    elif opcao == 3:
        # sair do programa
        print("Saindo do programa... At√© a pr√≥xima!")
        break

    else:
        print("Opera√ß√£o inv√°lida! Tente de novo.\n")  # tratamento de erro
    

# =====================================================
# DIA 6 (05/10/2025) ‚Äî Tipos de dados, Strings e Estruturas de decis√£o
# =====================================================
# Nas aulas 3 e 4 do curso, aprendemos:
# - Tipos de dados em Python
# - Entrada e sa√≠da de informa√ß√µes (input / print)
# - Manipula√ß√£o de textos (strings)
# - Estruturas de decis√£o (if, elif, else)
# - Exerc√≠cios pr√°ticos com base em situa√ß√µes reais

# =====================================================
# 1) Tipos de dados em Python
# -----------------------------------------------------
# Cada valor em Python tem um tipo (type).
# Os mais comuns s√£o:
#   int   ‚Üí n√∫meros inteiros (ex.: 10, -5, 1000)
#   float ‚Üí n√∫meros decimais (ex.: 3.14, -0.5, 2.0)
#   str   ‚Üí textos (strings) (ex.: "Ol√°", 'Python', "123")
#   bool  ‚Üí valores l√≥gicos (True ou False)
#
# Voc√™ pode verificar o tipo de uma vari√°vel com:
#   type(nome_da_variavel)
#
# Exemplo:
#   idade = 25
#   print(type(idade))   # <class 'int'>
#
# Observa√ß√£o:
#   O Python converte tipos automaticamente em alguns casos,
#   mas √© comum usarmos fun√ß√µes de convers√£o:
#   int()  ‚Üí converte para inteiro
#   float() ‚Üí converte para decimal
#   str()  ‚Üí converte para texto

# =====================================================
# Exerc√≠cio 0 ‚Äî Tipos de dados
# -----------------------------------------------------
# Pe√ßa ao usu√°rio para digitar:
# - Um n√∫mero inteiro
# - Um n√∫mero decimal
# - Um texto qualquer
# Em seguida, mostre na tela os valores e seus tipos usando a fun√ß√£o type().

nint = int(input("Digite um n√∫mero inteiro: "))   # converte o input para inteiro (int)
ndec = float(input("Digite um n√∫mero decimal: ")) # converte o input para decimal (float)
text = input("Digite uma frase qualquer: ")       # entrada padr√£o (string)

# Exibe o valor e o tipo de cada vari√°vel
print(nint)              # mostra o valor inteiro digitado
print(type(nint))        # mostra o tipo <class 'int'>
print(ndec)              # mostra o valor decimal digitado
print(type(ndec))        # mostra o tipo <class 'float'>
print(text)              # mostra o texto digitado
print(type(text))        # mostra o tipo <class 'str'>

# Dica:
# type() ‚Üí retorna o tipo do valor dentro dos par√™nteses.
# Isso ajuda muito quando estamos aprendendo convers√µes em Python.


# =====================================================
# 2) Entradas e sa√≠das (revis√£o)
# -----------------------------------------------------
# input() ‚Üí l√™ dados do usu√°rio sempre como texto (string)
# print() ‚Üí exibe mensagens e valores
#
# Dica: para usar valores num√©ricos em contas, converta o input
# para o tipo correto (int ou float).

# =====================================================
# Exerc√≠cio 1 ‚Äî Entrevista
# -----------------------------------------------------
# Crie um programa que fa√ßa perguntas a uma pessoa (simulando uma entrevista).
# Pe√ßa:
#   - Nome
#   - Idade
#   - Profiss√£o
#   - Cidade
# E mostre uma frase final juntando tudo de forma organizada:
#   "Ol√°, <nome>! Voc√™ tem <idade> anos, √© <profiss√£o> e mora em <cidade>."

print("Seja Bem-Vindo √† Sua Entrevista de Emprego")  # mensagem inicial

# Entradas de dados
nome = input("Comece me dizendo seu nome: ")         # nome (texto)
idade = int(input("Agora me diga sua idade: "))      # idade (convertida para n√∫mero inteiro)
profi = input("Qual sua profiss√£o? ")                # profiss√£o (texto)
cidade = input("De qual cidade voc√™ √©? ")            # cidade (texto)

# Sa√≠da de dados formatada com f-string
print(f"Ol√°, {nome}! Voc√™ tem {idade} anos, √© {profi} e mora em {cidade}.")

# -----------------------------------------------------
# Dica:
# - f-string (f"...") permite inserir vari√°veis dentro do texto.
# - Voc√™ pode usar qualquer express√£o dentro das chaves { }.
# Exemplo: print(f"{nome.upper()} tem {idade + 1} anos no pr√≥ximo anivers√°rio.")

# =====================================================
# 3) Manipula√ß√£o de Strings
# -----------------------------------------------------
# Strings s√£o textos entre aspas. Podemos manipul√°-las de v√°rias formas.
#
# M√©todos mais comuns:
#   .upper()   ‚Üí tudo mai√∫sculo
#   .lower()   ‚Üí tudo min√∫sculo
#   .title()   ‚Üí primeira letra de cada palavra em mai√∫sculo
#   .strip()   ‚Üí remove espa√ßos extras no in√≠cio e fim
#   .replace("a", "@") ‚Üí substitui partes do texto
#
# Outras fun√ß√µes √∫teis:
#   len(texto) ‚Üí conta quantos caracteres tem o texto
#
# Exemplo:
#   nome = "  jo√£o da silva  "
#   print(nome.strip().title())   # "Jo√£o Da Silva"

# =====================================================
# Exerc√≠cio 2 ‚Äî Trabalhando com Strings
# -----------------------------------------------------
# Pe√ßa ao usu√°rio que digite uma frase.
# Depois, mostre:
# - A frase em letras mai√∫sculas
# - A frase em letras min√∫sculas
# - A frase com apenas as iniciais mai√∫sculas
# - Quantos caracteres a frase tem (sem contar espa√ßos extras)
# - Uma vers√£o da frase sem espa√ßos no in√≠cio e no fim

frase = input("Me diga uma frase: ")  # entrada de texto do usu√°rio

# Exibe diferentes transforma√ß√µes da frase
print("Sua frase com letras mai√∫sculas √©:", frase.upper())   # tudo MAI√öSCULO
print("Sua frase com letras min√∫sculas √©:", frase.lower())   # tudo min√∫sculo
print("Sua frase com iniciais mai√∫sculas √©:", frase.title()) # primeira letra de cada palavra em mai√∫sculo
print("Essa √© a quantidade de caracteres na sua frase:", len(frase))  # conta caracteres totais
print("Sua frase sem espa√ßos no in√≠cio e no fim √©:", frase.strip())   # remove espa√ßos extras

# -----------------------------------------------------
# Dica:
# - upper()  ‚Üí transforma tudo em mai√∫sculo
# - lower()  ‚Üí transforma tudo em min√∫sculo
# - title()  ‚Üí inicial de cada palavra em mai√∫sculo
# - strip()  ‚Üí remove espa√ßos no in√≠cio e no fim
# - len()    ‚Üí conta quantos caracteres tem o texto


# =====================================================
# 4) Estruturas de decis√£o (if / elif / else)
# -----------------------------------------------------
# Com o if, o programa pode "escolher" o que fazer dependendo de uma condi√ß√£o.
#
# Exemplo:
#   nota = 8
#   if nota >= 7:
#       print("Aprovado!")
#   else:
#       print("Reprovado!")
#
# Tamb√©m podemos usar elif (sen√£o se):
#   if nota < 6:
#       print("Reprovado")
#   elif nota < 8:
#       print("Recupera√ß√£o")
#   else:
#       print("Aprovado com sucesso")

# =====================================================
# Exerc√≠cio 3 ‚Äî Estrutura de decis√£o
# -----------------------------------------------------
# Pe√ßa ao usu√°rio para digitar um n√∫mero.
# Se for positivo, mostre "N√∫mero positivo".
# Se for negativo, mostre "N√∫mero negativo".
# Se for zero, mostre "O n√∫mero √© zero."

numero = int(input("Digite um n√∫mero: "))  # l√™ um n√∫mero inteiro

if numero >= 1:                             # se for maior ou igual a 1
    print("Este n√∫mero √© positivo")         # mensagem para n√∫meros positivos
elif numero < 0:                            # se for menor que zero
    print("Este n√∫mero √© negativo")         # mensagem para negativos
else:                                       # caso contr√°rio (√© zero)
    print("O n√∫mero √© zero")                # mensagem para zero

# -----------------------------------------------------
# Dica:
# - 'if' √© usado para a primeira condi√ß√£o.
# - 'elif' significa "sen√£o se" ‚Üí verifica outras possibilidades.
# - 'else' √© executado quando nenhuma condi√ß√£o anterior √© verdadeira.



# =====================================================
# DIA 7 (06/10/2025) ‚Äî Continua√ß√£o Aulas 3 e 4
# (strings + decis√µes + valida√ß√µes simples)
# =====================================================
# Hoje vamos refor√ßar:
# - Manipula√ß√£o de strings em situa√ß√µes reais
# - Decis√µes com if/elif/else
# - Primeiras valida√ß√µes de entrada (sem complicar)
# - Programas curtos, bem ‚Äúm√£o na massa‚Äù
#
# Lembrete:
#  - input() sempre retorna str ‚Üí converta quando precisar (int/float)
#  - .strip() remove espa√ßos das pontas
#  - .lower() / .upper() / .title() para normalizar textos
#  - len() conta caracteres

# =====================================================
# 1) Normaliza√ß√£o de texto (revis√£o r√°pida)
# -----------------------------------------------------
# Exemplos √∫teis (rode para ver se quiser revisar, depois apague):
# nome = "  aNa cl√°uDia  "
# print(nome.strip().title())  # "Ana Cl√°udia"
# email = "  EXEMPLO@MAIL.COM "
# print(email.strip().lower()) # "exemplo@mail.com"

# =====================================================
# Exerc√≠cio 1 ‚Äî Cadastro com normaliza√ß√£o
# -----------------------------------------------------
# Objetivo:
#   Ler nome completo, e-mail e cidade.
#   Mostrar um ‚Äúresumo‚Äù com:
#     - Nome em T√≠tulo (title)
#     - E-mail todo min√∫sculo e sem espa√ßos nas pontas
#     - Cidade em T√≠tulo
#   Dica: use .strip(), .title(), .lower()
#
# Passos sugeridos:
#   1) Ler nome, email, cidade
#   2) Normalizar (ex.: nome_fmt = nome.strip().title())
#   3) Imprimir um bloco formatado com os valores normalizados

# Conceitos usados:
#   .title() ‚Üí deixa a primeira letra de cada palavra em mai√∫sculo
#   .lower() ‚Üí transforma todas as letras em min√∫sculas
#   .strip() ‚Üí remove espa√ßos extras no in√≠cio e fim do texto

nome = input("Digite seu nome: ")       # l√™ o nome completo
email = input("Digite seu e-mail: ")    # l√™ o e-mail do usu√°rio
cidade = input("Digite a cidade: ")     # l√™ a cidade

# Sa√≠da formatada
print(f"Seu nome √©: {nome.title()}")        # formata nome com iniciais mai√∫sculas
print(f"Seu e-mail √©: {email.lower().strip()}")  # min√∫sculas e sem espa√ßos extras
print(f"Sua cidade √©: {cidade.title()}")    # cidade com iniciais mai√∫sculas
    

# =====================================================
# 2) Decis√µes com faixas e limites
# -----------------------------------------------------
# Relembrando padr√£o de faixas:
# if valor < A:
#     ...
# elif valor < B:   # aqui j√° sabemos que A <= valor < B
#     ...
# else:
#     ...           # valor >= B

# =====================================================
# Exerc√≠cio 2 ‚Äî Classificador de senha simples
# -----------------------------------------------------
# Objetivo:
#   Pedir uma senha (texto) e classificar por ‚Äúfor√ßa‚Äù:
#     - < 6 caracteres  -> "Fraca"
#     - 6 a 9           -> "M√©dia"
#     - >= 10           -> "Forte"
#   Mostrar tamb√©m a vers√£o ‚Äúoculta‚Äù da senha (mesmo n√∫mero de * que o tamanho).
#   Dica: use len(senha) e "*" * len(senha)

# Conceitos usados:
#   len() ‚Üí conta quantos caracteres h√° em uma string

senha = input("Digite sua senha: ")    # l√™ a senha digitada
caracteres = len(senha)                # conta o n√∫mero de caracteres

# Estrutura condicional para classificar a senha
if caracteres < 6:
    print("Senha fraca")               # se for menor que 6
elif caracteres < 10:                  # entre 6 e 9
    print("Senha m√©dia")
else:                                  # 10 ou mais
    print("Senha forte")

# -----------------------------------------------------
# Dica:
# - len() sempre retorna um n√∫mero inteiro.
# - Voc√™ tamb√©m pode exibir a senha "oculta" com asteriscos:
#   print("*" * len(senha))
#   Isso mostra algo como: ********



# =====================================================
# 3) Pequenas valida√ß√µes de entrada (sem try/except)
# -----------------------------------------------------
# Estrat√©gia inicial:
#   - Ler como texto
#   - Verificar com .isdigit() se √© num√©rico inteiro
#   - Se n√£o for, avisar que √© inv√°lido
#
# Exemplo:
# txt = input("Digite um n√∫mero inteiro: ")
# if txt.isdigit():
#     n = int(txt)
#     print("ok:", n)
# else:
#     print("valor inv√°lido!")

# =====================================================
# Exerc√≠cio 3 ‚Äî Idade v√°lida
# -----------------------------------------------------
# Objetivo:
#   Perguntar a idade como string.
#   - Se n√£o for composta apenas por d√≠gitos ‚Üí "Idade inv√°lida"
#   - Caso contr√°rio, converter para int e:
#       * < 12  ‚Üí "Crian√ßa"
#       * 12-17 ‚Üí "Adolescente"
#       * 18-64 ‚Üí "Adulto"
#       * >= 65 ‚Üí "Idoso"
#   Dicas:
#     - idade_txt.isdigit()
#     - Depois de converter, use faixas com if/elif/else

# Conceitos usados:
#   .isdigit() ‚Üí retorna True se a string contiver apenas n√∫meros.
#   int()      ‚Üí converte o texto em n√∫mero inteiro.

idade = input("Digite sua idade: ")     # l√™ a idade como texto

if idade.isdigit():                     # verifica se √© composta apenas por n√∫meros
    n = int(idade)                      # converte para inteiro
    print("Ok:", n)                     # exibe valor validado

    # Classifica√ß√£o por faixa et√°ria
    if n < 12:
        print("Crian√ßa")
    elif n < 18:
        print("Adolescente")
    elif n < 65:
        print("Adulto")
    else:
        print("Idoso")

else:
    print("Valor inv√°lido!")            # caso tenha letras ou caracteres especiais

# -----------------------------------------------------
# Dica:
# - .isdigit() ignora sinais (+, -) e pontos, ent√£o ‚Äú12.5‚Äù ou ‚Äú-3‚Äù n√£o s√£o v√°lidos.
# - Para aceitar decimais ou negativos, precisar√≠amos usar try/except (em aulas futuras).


# =====================================================
# 4) Strings + decis√µes na pr√°tica (extens√£o de arquivo)
# -----------------------------------------------------
# Relembrando:
# arq = "foto.perfil.jpg"
# partes = arq.split(".")
# √∫ltima extens√£o: partes[-1].lower()

# =====================================================
# Exerc√≠cio 4 ‚Äî Detector de extens√£o
# -----------------------------------------------------
# Objetivo:
#   Pedir o nome de um arquivo (ex.: "documento.PDF", "foto.png", "planilha.xls").
#   Mostrar:
#     - Nome base (sem a extens√£o)
#     - Extens√£o em min√∫sculas
#   Depois, decidir pelo tipo:
#     - "Imagem" se for jpg/jpeg/png/gif
#     - "Documento" se for pdf/doc/docx/txt
#     - "Planilha" se for xls/xlsx/csv
#     - Caso contr√°rio: "Tipo desconhecido"
#   Dicas:
#     - Use .split(".") e pegue a √∫ltima parte como extens√£o
#     - Use .lower() na extens√£o
#     - Base do nome: junte o que veio antes da √∫ltima extens√£o (ou use rsplit(".", 1))

# Conceitos usados:
#   .split(".")  ‚Üí separa o texto nas partes divididas por ponto
#   partes[-1]   ‚Üí pega o √∫ltimo item da lista (a extens√£o)
#   .lower()     ‚Üí transforma o texto em min√∫sculas
#   ".".join(...) ‚Üí junta as partes da lista com ponto
#   in [lista]   ‚Üí verifica se o valor est√° dentro de uma lista

arquivo = input("Digite o nome do arquivo: ")          # l√™ o nome completo do arquivo
partes = arquivo.split(".")                            # divide o nome em partes separadas pelo ponto
extensao = partes[-1].lower()                          # pega a √∫ltima parte (extens√£o) e deixa min√∫scula
nome_base = ".".join(partes[:-1])                      # junta todas as partes antes da extens√£o

# Mostra as informa√ß√µes
print("Nome do arquivo:", nome_base)
print("Extens√£o:", extensao)

# Classifica√ß√£o do tipo de arquivo
if extensao in ["jpg", "jpeg", "png", "gif"]:
    print("Tipo: Imagem")
elif extensao in ["pdf", "doc", "docx", "txt"]:
    print("Tipo: Documento")
elif extensao in ["xls", "xlsx", "csv"]:
    print("Tipo: Planilha")
else:
    print("Tipo: Desconhecido!")

# -----------------------------------------------------
# Dica:
# - split() divide a string e retorna uma lista.
# - join() faz o inverso: junta os elementos da lista em uma string.
# - [-1] acessa o √∫ltimo item da lista, e [:-1] pega todos menos o √∫ltimo.
# - lower() evita erros com letras mai√∫sculas (como ‚ÄúJPG‚Äù ou ‚ÄúPDF‚Äù).



# =====================================================
# 5) Mini-programa com menu (vers√£o simples)
# -----------------------------------------------------
# Estrutura t√≠pica:
# while True:
#     mostrar op√ß√µes
#     ler op√ß√£o
#     if ... elif ... elif ... else ...
#     break para sair

# =====================================================
# Exerc√≠cio 5 ‚Äî Menu utilit√°rio de strings
# -----------------------------------------------------
# Objetivo:
#   Montar um menu em loop com as op√ß√µes:
#     [1] Contar caracteres de uma frase
#     [2] Colocar frase em MAI√öSCULAS
#     [3] Colocar frase em min√∫sculas
#     [4] Voltar/Sair
#   Regras:
#     - Em [1], pe√ßa a frase e mostre len(frase)
#     - Em [2] e [3], pe√ßa a frase e mostre transformada
#     - Em [4], encerrar o loop
#     - Se a op√ß√£o n√£o for 1,2,3,4 ‚Üí mensagem "Op√ß√£o inv√°lida"
#   Dica:
#     - Voc√™ pode ler a op√ß√£o como string (sem converter) para simplificar as compara√ß√µes

# Conceitos usados:
#   while True     ‚Üí cria um loop infinito at√© que o break seja acionado
#   len(texto)     ‚Üí retorna o n√∫mero de caracteres na string
#   .upper()       ‚Üí transforma todas as letras em mai√∫sculas
#   .lower()       ‚Üí transforma todas as letras em min√∫sculas
#   break          ‚Üí encerra o loop imediatamente

while True:
    # Exibi√ß√£o do menu
    print("========== MENU ==========")
    print("[1] Contar caracteres")
    print("[2] Colocar a frase em MAI√öSCULAS")
    print("[3] Colocar a frase em min√∫sculas")
    print("[4] Voltar/Sair")
    print("==========================")

    opcao = int(input("Escolha uma op√ß√£o: "))  # l√™ a escolha do usu√°rio

    # Op√ß√£o 1 ‚Üí contar caracteres
    if opcao == 1:
        carac = input("Digite sua frase: ")
        print("A sua frase tem", len(carac), "caracteres")  # len() conta os caracteres da frase

    # Op√ß√£o 2 ‚Üí transformar em MAI√öSCULAS
    elif opcao == 2:
        fraseM = input("Digite a frase: ")
        print("A frase fica:", fraseM.upper())  # .upper() transforma tudo em mai√∫sculas

    # Op√ß√£o 3 ‚Üí transformar em min√∫sculas
    elif opcao == 3:
        frasem = input("Digite sua frase: ")
        print("Sua frase fica:", frasem.lower())  # .lower() transforma tudo em min√∫sculas

    # Op√ß√£o 4 ‚Üí sair do menu
    elif opcao == 4:
        print("Saindo do menu... At√© logo!")
        break

    # Qualquer outra op√ß√£o ‚Üí inv√°lida
    else:
        print("Op√ß√£o inv√°lida! Tente novamente.\n")

# -----------------------------------------------------
# Dica:
# - Se quiser deixar o menu mais bonito, pode usar "\n" para quebrar linhas.
# - Tamb√©m d√° pra ler a op√ß√£o como string (ex.: opcao = input(...)),
#   assim o programa n√£o d√° erro se o usu√°rio digitar texto por engano.
    

# =====================================================
# 6) B√¥nus (opcional): formata√ß√£o de nome e e-mail
# -----------------------------------------------------
# Objetivo:
#   Ler nome completo e email.
#   - nome_fmt = .strip().title()
#   - email_fmt = .strip().lower()
#   Mostrar:
#     "Usu√°rio: <primeiro_nome>  Email: <email_fmt>"
#   Dicas:
#     - Para pegar o primeiro nome: nome_fmt.split()[0]
#     - Trate casos com espa√ßos a mais usando .strip()

# Dicas:
#   - .strip() remove espa√ßos no come√ßo/fim.
#   - .title() capitaliza cada palavra (cuidado com nomes como "da", "dos" ‚Äî serve para este n√≠vel).
#   - .lower() padroniza o e-mail.

# Entrada de dados
nome = input("Nome completo: ")
email = input("E-mail: ")

# Normaliza√ß√£o / padroniza√ß√£o
nome_fmt = nome.strip().title()       # Ex.: "  jo√£o da silva  " -> "Jo√£o Da Silva"
email_fmt = email.strip().lower()     # Ex.: "  EXEMPLO@MAIL.COM " -> "exemplo@mail.com"

# Primeiro nome (se houver palavras ap√≥s o strip)
partes_nome = nome_fmt.split()        # divide por espa√ßos
if len(partes_nome) > 0:
    primeiro_nome = partes_nome[0]
else:
    primeiro_nome = ""                # vazio se o usu√°rio n√£o digitou nada

# Sa√≠da
print("_" * 32)
print(f"Usu√°rio: {primeiro_nome}")
print(f"Nome completo: {nome_fmt}")
print(f"E-mail: {email_fmt}")
print("_" * 32)

# -----------------------------------------------------
# Extras (opcionais):
# - Voc√™ pode validar se o e-mail cont√©m "@" e "."
#   if "@" in email_fmt and "." in email_fmt: print("E-mail parece v√°lido")
#   else: print("Aten√ß√£o: e-mail pode estar incorreto")


# =====================================================
# DIA 8 (07/10/2025) ‚Äî Introdu√ß√£o a La√ßos de Repeti√ß√£o
# =====================================================
# Hoje come√ßamos a usar repeti√ß√µes (loops), que permitem
# executar blocos de c√≥digo v√°rias vezes sem precisar copiar.
#
# Vamos entender o uso de:
#   - while ‚Üí repete enquanto uma condi√ß√£o for verdadeira
#   - for   ‚Üí repete um n√∫mero conhecido de vezes (ou percorre listas, textos, etc.)
#
# Tamb√©m veremos:
#   - range() ‚Üí gera uma sequ√™ncia de n√∫meros
#   - break  ‚Üí interrompe o loop
#   - continue ‚Üí pula para a pr√≥xima repeti√ß√£o

# =====================================================
# 1) Estrutura WHILE ‚Äî repeti√ß√£o condicional
# -----------------------------------------------------
# while <condi√ß√£o>:
#     bloco a repetir enquanto a condi√ß√£o for verdadeira
#
# Exemplo:
# contador = 1
# while contador <= 5:
#     print("Contando:", contador)
#     contador += 1
#
# print("Fim!")

# =====================================================
# Exerc√≠cio 1 ‚Äî Contagem simples
# -----------------------------------------------------
# Objetivo:
#   Mostrar na tela uma contagem de 1 a 10.
# Dica:
#   Use uma vari√°vel contador e incremente com += 1
#   at√© chegar em 10.

contador = 1                          # in√≠cio da contagem

while contador <= 10:                  # enquanto o contador for menor ou igual a 10
    print("N√∫mero:", contador)         # mostra o n√∫mero atual
    contador += 1                      # incrementa o contador (soma +1 a cada volta)

print("Contagem finalizada!")          # mensagem final fora do loop

# =====================================================
# 2) Estrutura FOR ‚Äî repeti√ß√£o com contador
# -----------------------------------------------------
# for <vari√°vel> in range(in√≠cio, fim, passo):
#     bloco de c√≥digo
#
# Exemplo:
# for i in range(1, 6):
#     print("N√∫mero:", i)
#
# range(1, 6) ‚Üí gera [1, 2, 3, 4, 5]
#
# Observa√ß√£o:
# - O n√∫mero final (fim) n√£o √© inclu√≠do.
# - Voc√™ pode usar range(10) para ir de 0 at√© 9.

# =====================================================
# Exerc√≠cio 2 ‚Äî Tabuada
# -----------------------------------------------------
# Objetivo:
#   Ler um n√∫mero do usu√°rio e mostrar a tabuada dele (1 a 10).
# Dica:
#   Use o for com range(1, 11)
#   Exemplo de sa√≠da:
#     5 x 1 = 5
#     5 x 2 = 10
#     ...
#     5 x 10 = 50

num = int(input("Digite um n√∫mero para ver a tabuada: ")) # l√™ o n√∫mero
print(f"Tabuada do {num}:")                               # t√≠tulo da tabuada
for i in range(1, 11):                                    # de 1 a 10
    print(f"{num} x {i} = {num * i}")                     # mostra a multiplica√ß√£o
print("Tabuada finalizada!")                              # mensagem final
# Dica:
# - f-string (f"...") facilita a formata√ß√£o da sa√≠da.
# - range(1, 11) gera n√∫meros de 1 a 10 (11 n√£o incluso).

# =====================================================
# 3) Controle de loops com BREAK e CONTINUE
# -----------------------------------------------------
# break ‚Üí encerra o loop imediatamente.
# continue ‚Üí pula a repeti√ß√£o atual e vai pra pr√≥xima.
#
# Exemplo:
# for i in range(1, 6):
#     if i == 3:
#         continue    # pula o n√∫mero 3
#     print(i)
#
# Resultado: 1, 2, 4, 5

# =====================================================
# Exerc√≠cio 3 ‚Äî Contagem com pausa
# -----------------------------------------------------
# Objetivo:
#   Fa√ßa um loop que pe√ßa ao usu√°rio para digitar n√∫meros.
#   O programa deve continuar at√© que o usu√°rio digite 0.
#   Quando digitar 0, o loop termina e mostra:
#       "Fim! Voc√™ digitou X n√∫meros."
# Dica:
#   Use while True e break quando o n√∫mero for 0.
#   Use um contador para contar quantos foram digitados.

contador = 0                          # contador de n√∫meros digitados
while True:                           # loop infinito
    num = int(input("Digite um n√∫mero (0 para sair): "))  # l√™ o n√∫mero
    if num == 0:                      # se for 0, sai do loop
        break
    contador += 1                     # incrementa o contador
print(f"Fim! Voc√™ digitou {contador} n√∫meros.")  # mostra quantos foram digitados
# Dica:
# - while True cria um loop que s√≥ termina com break.
# - Use um contador para rastrear quantas vezes o usu√°rio entrou com um n√∫mero diferente de 0.

# =====================================================
# 4) Trabalhando com Strings em loops
# -----------------------------------------------------
# Voc√™ pode percorrer cada letra de uma string usando:
# for letra in texto:
#     print(letra)
#
# Ou contar vogais, espa√ßos, etc.

# =====================================================
# Exerc√≠cio 4 ‚Äî Contador de vogais
# -----------------------------------------------------
# Objetivo:
#   Ler uma frase do usu√°rio e contar quantas vogais (a, e, i, o, u)
#   existem no texto, desconsiderando mai√∫sculas/min√∫sculas.
# Dica:
#   Use .lower() e um contador.
#   Para verificar se a letra √© vogal:
#       if letra in "aeiou":

frase = input("Digite sua frase: ")        # pede a frase do usu√°rio
frase = frase.lower().strip()              # normaliza o texto (min√∫sculas e sem espa√ßos)
vogais = 0                                 # contador come√ßa em zero

for letra in frase:                        # percorre cada letra da frase
    if letra in "aeiou":                   # se for vogal
        vogais += 1                        # soma 1 ao contador

print("Sua frase √©:", frase)               # mostra a frase padronizada
print(f"Sua frase tem {vogais} vogais.")   # mostra quantas vogais foram encontradas

# -----------------------------------------------------
# Dica:
# - Voc√™ pode adicionar .count() em alternativa r√°pida:
#     total = sum(frase.count(v) for v in "aeiou")
# - Mas o m√©todo com o for √© melhor pra entender a l√≥gica de loops.



# =====================================================
# 5) La√ßos + Condi√ß√µes (combina√ß√£o pr√°tica)
# -----------------------------------------------------
# Podemos combinar loops com if/else dentro deles para criar
# pequenas simula√ß√µes e menus interativos.

# =====================================================
# Exerc√≠cio 5 ‚Äî Sistema de login com tentativas
# -----------------------------------------------------
# Objetivo:
#   Criar um sistema simples de login com at√© 3 tentativas.
#
# Regras:
#   - Usu√°rio e senha corretos: "admin" e "1234"
#   - Se acertar ‚Üí "Acesso permitido"
#   - Se errar 3 vezes ‚Üí "Acesso bloqueado"
#
# Dica:
#   Use um contador dentro de um while e o comando break
#   quando o login for bem-sucedido.

# Conceitos usados:
#   - while tentativas > 0  ‚Üí repete enquanto ainda h√° tentativas
#   - break ‚Üí encerra o loop imediatamente
#   - -= 1 ‚Üí subtrai 1 da vari√°vel

usuario_correto = "admin"      # usu√°rio autorizado
senha_correta = "1234"         # senha autorizada

tentativas = 3                 # n√∫mero m√°ximo de tentativas

while tentativas > 0:          # repete enquanto ainda h√° tentativas
    user = input("Usu√°rio: ")  # pede usu√°rio
    senha = input("Senha: ")   # pede senha

    if user == usuario_correto and senha == senha_correta:
        print("Acesso permitido!")
        break                  # sai do loop se estiver correto
    else:
        tentativas -= 1        # reduz uma tentativa
        print("Acesso negado! Tente novamente.")
        print(f"Tentativas restantes: {tentativas}\n")

        if tentativas == 0:    # se acabar as tentativas
            print("Acesso bloqueado! Tente novamente mais tarde.")
        

# =====================================================
# 6) B√¥nus ‚Äî Soma de m√∫ltiplos de 3
# -----------------------------------------------------
# Objetivo:
#   Some todos os n√∫meros de 1 a 50 que sejam m√∫ltiplos de 3.
# Dica:
#   Use for com range(1, 51) e o operador % (m√≥dulo).
#   if n√∫mero % 3 == 0 ‚Üí √© m√∫ltiplo de 3.

total = 0                          # acumulador para a soma
for num in range(1, 51):           # de 1 a 50
    if num % 3 == 0:               # verifica se √© m√∫ltiplo de 3
        total += num               # soma ao total
print("A soma dos m√∫ltiplos de 3 entre 1 e 50 √©:", total)  # mostra o resultado
# Dica:
# - O operador % retorna o resto da divis√£o.
# - Se o resto for 0, significa que √© m√∫ltiplo (ex.: 9 % 3 == 0).
# - Voc√™ pode mudar o range para outros intervalos conforme desejar.


# =====================================================
# DIA 9 (08/10/2025) ‚Äî Homework: Revis√£o Aulas 3 e 4
# =====================================================
# Objetivo:
#   Revisar os principais conceitos das aulas 3 e 4:
#   - Tipos de dados, strings, condicionais, loops e formata√ß√£o
# =====================================================

# =====================================================
# Exerc√≠cio 1 ‚Äî Conversor de Temperatura
# =====================================================
# F√≥rmula:
#   F = (C √ó 9/5) + 32

celsius = float(input("Temperatura em ¬∞C: "))
fahrenheit = (celsius * 9/5) + 32
print(f"{celsius:.1f}¬∞C equivalem a {fahrenheit:.1f}¬∞F")

# -----------------------------------------------------
# Dica:
# - float() permite entrada com decimais
# - f-string com :.1f mostra uma casa decimal
# - F√≥rmula inversa seria: C = (F - 32) * 5/9
# =====================================================


# =====================================================
# Exerc√≠cio 2 ‚Äî Contador de Palavras
# =====================================================

frase = input("Digite uma frase: ")
frase_limpa = frase.strip().lower()          # remove espa√ßos e padroniza
palavras = frase_limpa.split()               # separa as palavras em lista
total_palavras = len(palavras)               # conta as palavras
caracteres = len(frase_limpa.replace(" ", ""))  # remove espa√ßos e conta letras
letras_a = frase_limpa.count("a")            # conta quantos 'a' aparecem

print(f"A frase tem {total_palavras} palavras, {caracteres} caracteres e {letras_a} letras 'a'.")

# -----------------------------------------------------
# Dica:
# - .split() separa por espa√ßos
# - .replace(" ", "") tira os espa√ßos
# - .count("a") conta todas as letras ‚Äúa‚Äù
# =====================================================


# =====================================================
# Exerc√≠cio 3 ‚Äî Verificador de N√∫mero Par ou √çmpar
# =====================================================

num = int(input("Digite um n√∫mero: "))
if num % 2 == 0:
    print("Este n√∫mero √© PAR.")
else:
    print("Este n√∫mero √© √çMPAR.")

# -----------------------------------------------------
# Dica:
# - Operador % (m√≥dulo) mostra o resto da divis√£o.
# - Se o resto for 0 ‚Üí √© par.
# =====================================================


# =====================================================
# Exerc√≠cio 4 ‚Äî M√©dia com Situa√ß√£o Final
# =====================================================

n1 = float(input("Nota 1: "))
n2 = float(input("Nota 2: "))
n3 = float(input("Nota 3: "))
media = (n1 + n2 + n3) / 3

if media >= 7:
    situacao = "Aprovado"
elif media >= 5:
    situacao = "Recupera√ß√£o"
else:
    situacao = "Reprovado"

print(f"M√©dia: {media:.2f} ‚Äî Situa√ß√£o: {situacao}")

# -----------------------------------------------------
# Dica:
# - Estrutura em faixas: >= 7 / >= 5 / else.
# - :.2f ‚Üí duas casas decimais.
# =====================================================


# =====================================================
# Exerc√≠cio 5 ‚Äî Analisador de Idade
# =====================================================

nomes = []
idades = []

for i in range(5):
    nome = input(f"Nome da {i+1}¬™ pessoa: ")
    idade = int(input(f"Idade da {i+1}¬™ pessoa: "))
    nomes.append(nome)
    idades.append(idade)
    print("-" * 25)

media_idades = sum(idades) / len(idades)
mais_velho = nomes[idades.index(max(idades))]
mais_novo = nomes[idades.index(min(idades))]

print(f"M√©dia das idades: {media_idades:.1f}")
print(f"Mais velho: {mais_velho} ({max(idades)} anos)")
print(f"Mais novo: {mais_novo} ({min(idades)} anos)")

# -----------------------------------------------------
# Dica:
# - .append() adiciona valores em listas.
# - sum(lista) soma os elementos num√©ricos.
# - max() e min() retornam o maior e o menor valor.
# =====================================================


# =====================================================
# Exerc√≠cio 6 ‚Äî Gerador de Cupom Fiscal
# =====================================================

cliente = input("Nome do cliente: ")
produto = input("Produto: ")
quantidade = int(input("Quantidade: "))
preco = float(input("Pre√ßo unit√°rio: "))

total = quantidade * preco

print("=" * 30)
print(f"CLIENTE: {cliente}")
print(f"PRODUTO: {produto}")
print(f"QUANTIDADE: {quantidade}")
print(f"TOTAL: R${total:.2f}")
print("=" * 30)

# -----------------------------------------------------
# Dica:
# - Use multiplica√ß√£o para o total.
# - f-string com :.2f formata em reais (2 casas decimais).
# =====================================================


# =====================================================
# DESAFIO FINAL ‚Äî Simulador de Caixa de Loja
# =====================================================

nomes = []
valores = []
quantidades = []

while True:
    nome = input("Nome do produto (ou 'fim' para encerrar): ").strip().title()
    if nome.lower() == "fim":
        break
    preco = float(input("Pre√ßo unit√°rio: R$"))
    qtd = int(input("Quantidade: "))

    nomes.append(nome)
    valores.append(preco * qtd)
    quantidades.append(qtd)
    print("-" * 30)

# Resumo final
print("\n===== RESUMO DA COMPRA =====")
print(f"Itens comprados: {len(nomes)}")
print(f"Total de produtos: {sum(quantidades)}")
print(f"Valor total: R${sum(valores):.2f}")
print(f"Produto mais caro: {nomes[valores.index(max(valores))]}")
print("=" * 30)

# -----------------------------------------------------
# Dica:
# - while True + break cria o loop infinito controlado.
# - .append() adiciona os dados nas listas.
# - .index(max(valores)) encontra o produto mais caro.
# =====================================================
